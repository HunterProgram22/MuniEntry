{\rtf1\ansi\uc0\deff0{\fonttbl{\f0\fmodern\fprq1\fcharset0;}}{\colortbl;\red136\green136\blue136;\red170\green0\blue0;\red0\green170\blue170;\red0\green0\blue170;\red0\green153\blue153;\red170\green85\blue0;\red0\green0\blue128;\red128\green0\blue128;\red170\green170\blue170;\red0\green170\blue0;\red76\green131\blue23;\red187\green187\blue187;\red85\green85\blue85;\red255\green0\blue0;\red255\green170\blue170;\red30\green144\blue255;\red136\green0\blue0;}\f0 {\cf6 """The controller module for the minor misdemeanor dialog - it is not limited\par
to minor misdemeanors, but does not contain functions to account for jail time.\par
Loads all charges - including non-minor-misdemeanors from a database."""}\par
{\cf4 import} {\cf3\ul pathlib}\par
{\cf4 from} {\cf3\ul datetime} {\cf4 import} date, timedelta\par
{\cf4 from} {\cf3\ul loguru} {\cf4 import} logger\par
\par
{\cf4 from} {\cf3\ul PyQt5} {\cf4 import} QtCore\par
{\cf4 from} {\cf3\ul PyQt5.QtCore} {\cf4 import} QDate\par
{\cf4 from} {\cf3\ul PyQt5.QtWidgets} {\cf4 import} QLabel, QPushButton, QMessageBox, QComboBox, QLineEdit\par
{\cf4 from} {\cf3\ul PyQt5.QtSql} {\cf4 import} QSqlDatabase, QSqlQuery\par
\par
{\cf4 from} {\cf3\ul views.custom_widgets} {\cf4 import} (\par
    PleaComboBox,\par
    FindingComboBox,\par
    FineLineEdit,\par
    FineSuspendedLineEdit,\par
    DeleteButton,\par
    AmendButton,\par
)\par
{\cf4 from} {\cf3\ul views.minor_misdemeanor_dialog_ui} {\cf4 import} Ui_MinorMisdemeanorDialog\par
{\cf4 from} {\cf3\ul models.template_types} {\cf4 import} TEMPLATE_DICT\par
{\cf4 from} {\cf3\ul models.case_information} {\cf4 import} (\par
    CaseInformation,\par
    CriminalCharge,\par
    AmendOffenseDetails,\par
    LicenseSuspensionTerms,\par
    CommunityControlTerms,\par
    CommunityServiceTerms,\par
    OtherConditionsTerms,\par
)\par
{\cf4 from} {\cf3\ul models.messages} {\cf4 import} TURNS_AT_INTERSECTIONS {\cf4 as} TURNS_WARNING\par
{\cf4 from} {\cf3\ul controllers.criminal_dialogs} {\cf4 import} (\par
    BaseCriminalDialog,\par
    AddConditionsDialog,\par
    AmendOffenseDialog,\par
)\par
{\cf4 from} {\cf3\ul resources.db.DatabaseCreation} {\cf4 import} create_offense_list, create_statute_list\par
\par
\par
PATH = {\cf3 str}(pathlib.Path().absolute())\par
TEMPLATE_PATH = PATH + {\cf6 "}{\cf6 \\\\}{\cf6 resources}{\cf6 \\\\}{\cf6 templates}{\cf6 \\\\}{\cf6 "}\par
SAVE_PATH = PATH + {\cf6 "}{\cf6 \\\\}{\cf6 resources}{\cf6 \\\\}{\cf6 saved}{\cf6 \\\\}{\cf6 "}\par
DB_PATH = PATH + {\cf6 "}{\cf6 \\\\}{\cf6 resources}{\cf6 \\\\}{\cf6 db}{\cf6 \\\\}{\cf6 "}\par
CHARGES_DATABASE = DB_PATH + {\cf6 "}{\cf6 \\\\}{\cf6 charges.sqlite}{\cf6 "}\par
\par
\par
{\cf1 @logger.catch}\par
{\cf4 def} {\cf10 create_database_connections}():\par
    {\cf6 """The databases for the application are created upon import of the module, which is done\par
    on application startup. The connections to the databases are created, but the opening and\par
    closing of the databases is handled by the appropriate class dialog."""}\par
    offense_database_connection = QSqlDatabase.addDatabase({\cf6 "}{\cf6 QSQLITE}{\cf6 "}, {\cf6 "}{\cf6 offenses}{\cf6 "})\par
    offense_database_connection.setDatabaseName(CHARGES_DATABASE)\par
    statute_database_connection = QSqlDatabase.addDatabase({\cf6 "}{\cf6 QSQLITE}{\cf6 "}, {\cf6 "}{\cf6 statutes}{\cf6 "})\par
    statute_database_connection.setDatabaseName(CHARGES_DATABASE)\par
    {\cf4 return} offense_database_connection, statute_database_connection\par
\par
\par
{\cf1 @logger.catch}\par
{\cf4 def} {\cf10 open_databases}():\par
    {\cf6 """\par
    https://www.tutorialspoint.com/pyqt/pyqt_database_handling.htm\par
    https://doc.qt.io/qtforpython/overviews/sql-connecting.html\par
    NOTE: If running create_psql_table.py to update database, must delete\par
    the old charges.sqlite file to insure it is updated.\par
    """}\par
    database_offenses.open()\par
    database_statutes.open()\par
\par
\par
{\cf1 @logger.catch}\par
{\cf4 def} {\cf10 close_databases}():\par
    {\cf6 """Closes any databases that were opened at the start of the dialog."""}\par
    database_offenses.close()\par
    database_offenses.removeDatabase(CHARGES_DATABASE)\par
    database_statutes.close()\par
    database_statutes.removeDatabase(CHARGES_DATABASE)\par
\par
\par
{\cf4 class} {\cf10\ul MinorMisdemeanorDialog}(BaseCriminalDialog, Ui_MinorMisdemeanorDialog):\par
    {\cf6 """The dialog inherits from the BaseCriminalDialog (controller) and the\par
    Ui_MinorMisdemeanorDialog (view).\par
\par
    This dialog is used when there will not be any jail time imposed. It does\par
    not inherently limit cases to minor misdemeanors or unclassified\par
    misdemeanors, however, it does not include fields to enter jail time."""}\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 __init__}({\cf3 self}, judicial_officer, parent={\cf3 None}):\par
        open_databases()\par
        {\cf3 super}().{\cf10 __init__}(parent)\par
        {\cf3 self}.case_information = CaseInformation(judicial_officer)\par
        {\cf3 self}.modify_view()\par
        {\cf3 self}.connect_signals_to_slots()\par
        {\cf3 self}.template = TEMPLATE_DICT.get({\cf3 self}.case_information.judicial_officer.last_name)\par
        {\cf3 self}.delete_button_list = []\par
        {\cf3 self}.amend_button_list = []\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 modify_view}({\cf3 self}):\par
        {\cf6 """The modify view method updates the view that is created on init from the\par
        Ui_MinorMisdemeanorDialog. Place items in this method that can't be added\par
        directly in QtDesigner so that they don't need to be changed in the view file\par
        each time pyuic5 is run."""}\par
        statute_list = create_statute_list()\par
        {\cf3 self}.statute_choice_box.addItems(statute_list)\par
        {\cf3 self}.offense_choice_box.addItems(create_offense_list())\par
        {\cf3 self}.plea_trial_date.setDate(QtCore.QDate.currentDate())\par
        {\cf3 self}.balance_due_date.setDate(QtCore.QDate.currentDate())\par
        {\cf3 self}.statute_choice_box.setCurrentText({\cf6 "}{\cf6 "})\par
        {\cf3 self}.offense_choice_box.setCurrentText({\cf6 "}{\cf6 "})\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 connect_signals_to_slots}({\cf3 self}):\par
        {\cf6 """The method connects any signals to slots. Generally, connecting with\par
        pressed is preferred to clicked because a clicked event sends a bool\par
        argument to the function. However, clicked is used in some instances\par
        because it is a press and release of a button. Using pressed sometimes\par
        caused an event to be triggered twice."""}\par
        {\cf3 self}.cancel_Button.pressed.connect({\cf3 self}.close_event)\par
        {\cf3 self}.clear_fields_case_Button.pressed.connect({\cf3 self}.clear_case_information_fields)\par
        {\cf3 self}.create_entry_Button.pressed.connect({\cf3 self}.create_entry_process)\par
        {\cf3 self}.add_conditions_Button.pressed.connect({\cf3 self}.start_add_conditions_dialog)\par
        {\cf3 self}.add_charge_Button.clicked.connect({\cf3 self}.add_charge_process)\par
        {\cf3 self}.clear_fields_charge_Button.pressed.connect({\cf3 self}.clear_charge_fields)\par
        {\cf3 self}.statute_choice_box.currentTextChanged.connect({\cf3 self}.set_offense)\par
        {\cf3 self}.offense_choice_box.currentTextChanged.connect({\cf3 self}.set_statute)\par
        {\cf3 self}.fra_in_file_box.currentTextChanged.connect({\cf3 self}.set_fra_in_file)\par
        {\cf3 self}.fra_in_court_box.currentTextChanged.connect({\cf3 self}.set_fra_in_court)\par
        {\cf3 self}.ability_to_pay_box.currentTextChanged.connect({\cf3 self}.set_pay_date)\par
        {\cf3 self}.guilty_all_Button.pressed.connect({\cf3 self}.guilty_all_plea_and_findings)\par
        {\cf3 self}.no_contest_all_Button.pressed.connect({\cf3 self}.no_contest_all_plea_and_findings)\par
        {\cf3 self}.costs_and_fines_Button.clicked.connect({\cf3 self}.show_costs_and_fines)\par
\par
    {\cf4 def} {\cf10 clear_case_information_fields}({\cf3 self}):\par
        {\cf3 self}.defendant_first_name_lineEdit.clear()\par
        {\cf3 self}.defendant_last_name_lineEdit.clear()\par
        {\cf3 self}.case_number_lineEdit.clear()\par
        {\cf3 self}.defendant_first_name_lineEdit.setFocus()\par
\par
    {\cf4 def} {\cf10 clear_charge_fields}({\cf3 self}):\par
        {\cf6 """Clears the fields that are used for adding a charge. The\par
        statute_choice_box and offense_choice_box use the clearEditText\par
        method because those boxes are editable."""}\par
        {\cf3 self}.statute_choice_box.clearEditText()\par
        {\cf3 self}.offense_choice_box.clearEditText()\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 start_amend_offense_dialog}({\cf3 self}):\par
        {\cf6 """Opens the amend offense dialog as a modal window. The\par
        case_information is passed to the dialog class in order to populate\par
        the case information banner."""}\par
        {\cf3 self}.update_case_information()\par
        AmendOffenseDialog({\cf3 self}.case_information).{\cf4 exec}()\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 start_add_conditions_dialog}({\cf3 self}):\par
        {\cf6 """Opens the add conditions dialog as a modal window. It passes the\par
        instance of the MinorMisdemeanorDialog class (self) as an argument\par
        so that the AddConditionsDialog can access all data from the\par
        MinorMisdemeanorDialog when working in the AddConditionsDialog."""}\par
        AddConditionsDialog({\cf3 self}).{\cf4 exec}()\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 close_event}({\cf3 self}):\par
        {\cf6 """Place any cleanup items (i.e. close_databases) here that should be\par
        called when the entry is created and the dialog closed."""}\par
        close_databases()\par
        {\cf3 self}.close_window()\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 add_charge}({\cf3 self}):\par
        {\cf6 """The add_charge_process, from which this is called, creates a criminal\par
        charge object and adds the data in the view to the object. The criminal\par
        charge (offense, statute, degree and type) is then added to the case\par
        information model (by appending the charge object to the criminal\par
        charges list).\par
\par
        The offense, statute and degree are added to the view by the method\par
        add_charge_to_view, not this method. This method is triggered on\par
        clicked() of the Add Charge button."""}\par
        {\cf3 self}.criminal_charge.offense = {\cf3 self}.offense_choice_box.currentText()\par
        {\cf3 self}.criminal_charge.statute = {\cf3 self}.statute_choice_box.currentText()\par
        {\cf3 self}.criminal_charge.degree = {\cf3 self}.degree_choice_box.currentText()\par
        {\cf3 self}.criminal_charge.type = {\cf3 self}.set_offense_type()\par
        {\cf3 self}.case_information.add_charge_to_list({\cf3 self}.criminal_charge)\par
        {\cf3 self}.add_charge_to_view()\par
        {\cf3 self}.statute_choice_box.setFocus()\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 add_charge_to_view}({\cf3 self}):\par
        {\cf6 """Adds the charge that was added through add_charge method to the\par
        view/GUI. The first row=0 because of python zero-based indexing. The\par
        column is set at one more than the current number of columns because\par
        it is the column to which the charge will be added.\par
\par
        :added_charge_index: - The added charge index is one less than the\par
        total charges in charges_list because of zero-based indexing. Thus, if\par
        there is one charge, the index of the charge to be added to the\par
        charge_dict from the charges_list is 0.\par
\par
        The python builtin vars function returns the __dict__ attribute of\par
        the object.\par
\par
        The self.criminal_charge.offense added as a parameter for FineLineEdit\par
        is the current one added when "Add Charge" is pressed.\par
\par
        TODO: Refactor so that there isn't a need for a if branch to skip the\par
        attribute for charge type."""}\par
        row = {\cf5 0}\par
        column = {\cf3 self}.charges_gridLayout.columnCount() + {\cf5 1}\par
        added_charge_index = {\cf3 len}({\cf3 self}.case_information.charges_list) - {\cf5 1}\par
        charge = {\cf3 vars}({\cf3 self}.case_information.charges_list[added_charge_index])\par
        {\cf4 for} value {\cf4 in} charge.values():\par
            {\cf4 if} value {\cf4 is} {\cf4 not} {\cf3 None}:\par
                {\cf4 if} value {\cf4 in} [{\cf6 "}{\cf6 Moving Traffic}{\cf6 "}, {\cf6 "}{\cf6 Non-moving Traffic}{\cf6 "}, {\cf6 "}{\cf6 Criminal}{\cf6 "}]:\par
                    {\cf4 break}\par
                {\cf3 self}.charges_gridLayout.addWidget(QLabel(value), row, column)\par
                row += {\cf5 1}\par
        {\cf3 self}.charges_gridLayout.addWidget(PleaComboBox(), row, column)\par
        row +={\cf5 1}\par
        {\cf3 self}.charges_gridLayout.addWidget(FindingComboBox(), row, column)\par
        row +={\cf5 1}\par
        {\cf3 self}.charges_gridLayout.addWidget(FineLineEdit({\cf3 self}.criminal_charge.offense), row, column)\par
        row +={\cf5 1}\par
        {\cf3 self}.charges_gridLayout.addWidget(FineSuspendedLineEdit(), row, column)\par
        row +={\cf5 1}\par
        {\cf3 self}.add_delete_button_to_view(row, column)\par
        row +={\cf5 1}\par
        {\cf3 self}.add_amend_button_to_view(row, column)\par
\par
    {\cf4 def} {\cf10 add_delete_button_to_view}({\cf3 self}, row, column):\par
        delete_button = DeleteButton()\par
        {\cf3 self}.delete_button_list.append(delete_button)\par
        delete_button.pressed.connect({\cf3 self}.delete_charge)\par
        {\cf3 self}.charges_gridLayout.addWidget(delete_button, row, column)\par
\par
    {\cf4 def} {\cf10 add_amend_button_to_view}({\cf3 self}, row, column):\par
        amend_button = AmendButton()\par
        {\cf3 self}.amend_button_list.append(amend_button)\par
        amend_button.pressed.connect({\cf3 self}.start_amend_offense_dialog)\par
        {\cf3 self}.charges_gridLayout.addWidget(amend_button, row, column)\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 delete_charge}({\cf3 self}):\par
        {\cf6 """Deletes the offense from the case_information.charges list. Then\par
        decrements the total charges by one so that other functions using the\par
        total charges for indexing are correct."""}\par
        index = {\cf3 self}.delete_button_list.index({\cf3 self}.sender())\par
        {\cf4 del} {\cf3 self}.case_information.charges_list[index]\par
        {\cf4 del} {\cf3 self}.delete_button_list[index]\par
        {\cf3 self}.delete_charge_from_view()\par
        {\cf3 self}.statute_choice_box.setFocus()\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 delete_charge_from_view}({\cf3 self}):\par
        {\cf6 """Uses the delete_button that is indexed to the column to delete the\par
        QLabels for the charge."""}\par
        index = {\cf3 self}.charges_gridLayout.indexOf({\cf3 self}.sender())\par
        column = {\cf3 self}.charges_gridLayout.getItemPosition(index)[{\cf5 1}]\par
        {\cf4 for} row {\cf4 in} {\cf3 range}({\cf3 self}.charges_gridLayout.rowCount()):\par
            layout_item = {\cf3 self}.charges_gridLayout.itemAtPosition(row, column)\par
            {\cf4 if} layout_item {\cf4 is} {\cf4 not} {\cf3 None}:\par
                layout_item.widget().deleteLater()\par
                {\cf3 self}.charges_gridLayout.removeItem(layout_item)\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 update_case_information}({\cf3 self}):\par
        {\cf6 """The method calls functions to update the case information model\par
        with the data for the case that is in the fields on the view. This does\par
        not update the model\par
        with information in the charge fields (offense, statute, plea, etc.)\par
        the charge information is transferred to the model upon press of the\par
        add charge button.\par
\par
        Fields that are updated upon pressed() of createEntryButton = case\par
        number, first name, last name, ability to pay time, balance due date,\par
        date of plea/trial,operator license number, date of birth, FRA (proof\par
        of insurance) in complaint, FRA in court."""}\par
        {\cf3 self}.update_party_information()\par
        {\cf3 self}.update_costs_and_fines_information()\par
        {\cf3 self}.add_dispositions_and_fines()\par
        {\cf3 self}.check_add_conditions()\par
        {\cf3 self}.calculate_costs_and_fines()\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 update_party_information}({\cf3 self}):\par
        {\cf3 self}.case_information.case_number = {\cf3 self}.case_number_lineEdit.text()\par
        {\cf3 self}.case_information.defendant.first_name = {\cf3 self}.defendant_first_name_lineEdit.text()\par
        {\cf3 self}.case_information.defendant.last_name = {\cf3 self}.defendant_last_name_lineEdit.text()\par
        {\cf3 self}.case_information.plea_trial_date = {\cf3 self}.plea_trial_date.date().toString({\cf6 "}{\cf6 MMMM dd, yyyy}{\cf6 "})\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 update_costs_and_fines_information}({\cf3 self}):\par
        {\cf3 self}.case_information.court_costs_ordered = {\cf3 self}.court_costs_box.currentText()\par
        {\cf3 self}.case_information.ability_to_pay_time = {\cf3 self}.ability_to_pay_box.currentText()\par
        {\cf3 self}.case_information.balance_due_date = {\cf3 self}.balance_due_date.date().toString({\cf6 "}{\cf6 MMMM dd, yyyy}{\cf6 "})\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 add_dispositions_and_fines}({\cf3 self}):\par
        {\cf6 """Row 3 - plea, 4 - finding, 5 - fine, 6 fine-suspended.\par
        Columns start at 0 for labels and 2 for first entry then 4 etc.\par
\par
        Column count increases by 2 instead of one due to grid adding two\par
        columns when a charge is added (odd numbered column is empty)."""}\par
        column = {\cf5 2}\par
        {\cf4 try}:\par
            {\cf4 for} index {\cf4 in} {\cf3 range}({\cf3 len}({\cf3 self}.case_information.charges_list)):\par
                {\cf3 self}.case_information.charges_list[index].plea = {\cf3 self}.charges_gridLayout.itemAtPosition({\cf5 3},column).widget().currentText()\par
                {\cf3 self}.case_information.charges_list[index].finding = {\cf3 self}.charges_gridLayout.itemAtPosition({\cf5 4},column).widget().currentText()\par
                {\cf3 self}.case_information.charges_list[index].fines_amount = {\cf3 self}.charges_gridLayout.itemAtPosition({\cf5 5},column).widget().text()\par
                {\cf4 if} {\cf3 self}.charges_gridLayout.itemAtPosition({\cf5 6},column).widget().text() == {\cf6 "}{\cf6 "}:\par
                    {\cf3 self}.case_information.charges_list[index].fines_suspended = {\cf6 "}{\cf6 0}{\cf6 "}\par
                {\cf4 else}:\par
                    {\cf3 self}.case_information.charges_list[index].fines_suspended = {\cf3 self}.charges_gridLayout.itemAtPosition({\cf5 6},column).widget().text()\par
                index +={\cf5 1}\par
                column +={\cf5 2}\par
        {\cf4 except} AttributeError:\par
            {\cf4 print}({\cf6 "}{\cf6 Attribute error allowed to pass for lack of widget}{\cf6 "})\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 check_add_conditions}({\cf3 self}):\par
        {\cf6 """Checks to see what conditions in the Add Conditions box are checked and then\par
        transfers the information from the conditions to case_information model if the\par
        box is checked.\par
\par
        TODO:\par
        in future refactor this to have it loop through the different conditions so code\par
        doesn't need to be added each time a condition is added."""}\par
        {\cf4 if} {\cf3 self}.license_suspension_checkBox.isChecked():\par
            {\cf3 self}.case_information.license_suspension_details.license_suspension_ordered = (\par
                {\cf3 True}\par
            )\par
        {\cf4 if} {\cf3 self}.community_control_checkBox.isChecked():\par
            {\cf3 self}.case_information.community_control_terms.community_control_required = (\par
                {\cf3 True}\par
            )\par
        {\cf4 if} {\cf3 self}.community_service_checkBox.isChecked():\par
            {\cf3 self}.case_information.community_service_terms.community_service_ordered = (\par
                {\cf3 True}\par
            )\par
        {\cf4 if} {\cf3 self}.other_conditions_checkBox.isChecked():\par
            {\cf3 self}.case_information.other_conditions_details.other_conditions_ordered = (\par
                {\cf3 True}\par
            )\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 calculate_costs_and_fines}({\cf3 self}):\par
        {\cf3 self}.case_information.court_costs = {\cf5 0}\par
        {\cf4 if} {\cf3 self}.court_costs_box.currentText() == {\cf6 "}{\cf6 Yes}{\cf6 "}:\par
            {\cf4 for} index, charge {\cf4 in} {\cf3 enumerate}({\cf3 self}.case_information.charges_list):\par
                {\cf4 if} {\cf3 self}.case_information.court_costs == {\cf5 124}:\par
                    {\cf4 break}\par
                {\cf4 else}:\par
                    {\cf4 if} charge.type == {\cf6 "}{\cf6 Moving Traffic}{\cf6 "}:\par
                        {\cf4 if} {\cf3 self}.case_information.court_costs < {\cf5 124}:\par
                            {\cf3 self}.case_information.court_costs = {\cf5 124}\par
                    {\cf4 elif} charge.type == {\cf6 "}{\cf6 Criminal}{\cf6 "}:\par
                        {\cf4 if} {\cf3 self}.case_information.court_costs < {\cf5 114}:\par
                            {\cf3 self}.case_information.court_costs = {\cf5 114}\par
                    {\cf4 elif} charge.type == {\cf6 "}{\cf6 Non-moving Traffic}{\cf6 "}:\par
                        {\cf4 if} {\cf3 self}.case_information.court_costs < {\cf5 95}:\par
                            {\cf3 self}.case_information.court_costs = {\cf5 95}\par
        total_fines = {\cf5 0}\par
        {\cf4 try}:\par
            {\cf4 for} index, charge {\cf4 in} {\cf3 enumerate}({\cf3 self}.case_information.charges_list):\par
                {\cf4 if} charge.fines_amount == {\cf6 '}{\cf6 '}:\par
                    charge.fines_amount = {\cf5 0}\par
                total_fines = total_fines + {\cf3 int}(charge.fines_amount)\par
            {\cf3 self}.case_information.total_fines = total_fines\par
            total_fines_suspended = {\cf5 0}\par
            {\cf4 for} index, charge {\cf4 in} {\cf3 enumerate}({\cf3 self}.case_information.charges_list):\par
                {\cf4 if} charge.fines_suspended == {\cf6 '}{\cf6 '}:\par
                    charge.fines_suspended = {\cf5 0}\par
                total_fines_suspended = total_fines_suspended + {\cf3 int}(charge.fines_suspended)\par
            {\cf3 self}.case_information.total_fines_suspended = total_fines_suspended\par
        {\cf4 except} TypeError:\par
            {\cf4 print}({\cf6 "}{\cf6 A type error was allowed to pass - this is because of deleted charge.}{\cf6 "})\par
\par
    {\cf4 def} {\cf10 show_costs_and_fines}({\cf3 self}, {\cf3 bool}):\par
        {\cf6 """The bool is the toggle from the clicked() of the button pressed. No\par
        action is taken with respect to it."""}\par
        {\cf3 self}.update_case_information()\par
        message = QMessageBox()\par
        message.setIcon(QMessageBox.Information)\par
        message.setWindowTitle({\cf6 "}{\cf6 Total Costs and Fines}{\cf6 "})\par
        message.setInformativeText({\cf6 "}{\cf6 Costs: $}{\cf6 "} + {\cf3 str}({\cf3 self}.case_information.court_costs) +\\\par
            {\cf6 "}{\cf6 \\n}{\cf6 Fines: $}{\cf6 "} + {\cf3 str}({\cf3 self}.case_information.total_fines) +\\\par
            {\cf6 "}{\cf6 \\n}{\cf6 Fines Suspended: $}{\cf6 "} + {\cf3 str}({\cf3 self}.case_information.total_fines_suspended) +\\\par
            {\cf6 "}{\cf6 \\n}{\cf6 \\n}{\cf6 *Does not include possible bond forfeiture or other costs }{\cf6 \\n}{\cf6  that may be assesed as a result of prior actions in case. }{\cf6 "})\par
        total_fines_and_costs = ({\cf3 self}.case_information.court_costs +\\\par
            {\cf3 self}.case_information.total_fines) - {\cf3 self}.case_information.total_fines_suspended\par
        message.setText({\cf6 "}{\cf6 Total Costs and Fines Due By Due Date: $}{\cf6 "} + {\cf3 str}(total_fines_and_costs))\par
        message.setStandardButtons(QMessageBox.Ok)\par
        message.exec_()\par
\par
    {\cf4 def} {\cf10 guilty_all_plea_and_findings}({\cf3 self}):\par
        {\cf6 """Sets the plea and findings boxes to guilty for all charges currently\par
        in the charges_gridLayout."""}\par
        {\cf4 for} column {\cf4 in} {\cf3 range}({\cf3 self}.charges_gridLayout.columnCount()):\par
            {\cf4 try}:\par
                {\cf4 if} {\cf3 isinstance}({\cf3 self}.charges_gridLayout.itemAtPosition({\cf5 3}, column).widget(), PleaComboBox):\par
                    {\cf3 self}.charges_gridLayout.itemAtPosition({\cf5 3},column).widget().setCurrentText({\cf6 "}{\cf6 Guilty}{\cf6 "})\par
                    {\cf3 self}.charges_gridLayout.itemAtPosition({\cf5 4},column).widget().setCurrentText({\cf6 "}{\cf6 Guilty}{\cf6 "})\par
                    column +={\cf5 1}\par
            {\cf4 except} AttributeError:\par
                {\cf4 pass}\par
        {\cf3 self}.set_cursor_to_FineLineEdit()\par
\par
    {\cf4 def} {\cf10 no_contest_all_plea_and_findings}({\cf3 self}):\par
        {\cf6 """Sets the plea box to no contest and findings boxes to guilty for all\par
        charges currently in the charges_gridLayout."""}\par
        {\cf4 for} column {\cf4 in} {\cf3 range}({\cf3 self}.charges_gridLayout.columnCount()):\par
            {\cf4 try}:\par
                {\cf4 if} {\cf3 isinstance}({\cf3 self}.charges_gridLayout.itemAtPosition({\cf5 3}, column).widget(), PleaComboBox):\par
                    {\cf3 self}.charges_gridLayout.itemAtPosition({\cf5 3},column).widget().setCurrentText({\cf6 "}{\cf6 No Contest}{\cf6 "})\par
                    {\cf3 self}.charges_gridLayout.itemAtPosition({\cf5 4},column).widget().setCurrentText({\cf6 "}{\cf6 Guilty}{\cf6 "})\par
                    column +={\cf5 1}\par
            {\cf4 except} AttributeError:\par
                {\cf4 pass}\par
        {\cf3 self}.set_cursor_to_FineLineEdit()\par
\par
    {\cf4 def} {\cf10 set_cursor_to_FineLineEdit}({\cf3 self}):\par
        {\cf4 for} column {\cf4 in} {\cf3 range}({\cf3 self}.charges_gridLayout.columnCount()):\par
            {\cf4 try}:\par
                {\cf4 if} {\cf3 isinstance}({\cf3 self}.charges_gridLayout.itemAtPosition({\cf5 5}, column).widget(), FineLineEdit):\par
                    {\cf3 self}.charges_gridLayout.itemAtPosition({\cf5 5}, column).widget().setFocus()\par
                    {\cf4 break}\par
            {\cf4 except} AttributeError:\par
                {\cf4 pass}\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 set_fra_in_file}({\cf3 self}, current_text):\par
        {\cf6 """Sets the FRA (proof of insurance) to true if the view indicates 'yes'\par
        that the FRA was shown in the complaint of file."""}\par
        {\cf4 if} current_text == {\cf6 "}{\cf6 Yes}{\cf6 "}:\par
            {\cf3 self}.case_information.fra_in_file = {\cf3 True}\par
            {\cf3 self}.fra_in_court_box.setCurrentText({\cf6 "}{\cf6 No}{\cf6 "})\par
        {\cf4 elif} current_text == {\cf6 "}{\cf6 No}{\cf6 "}:\par
            {\cf3 self}.case_information.fra_in_file = {\cf3 False}\par
        {\cf4 else}:\par
            {\cf3 self}.case_information.fra_in_file = {\cf3 None}\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 set_fra_in_court}({\cf3 self}, current_text):\par
        {\cf6 """Sets the FRA (proof of insurance) to true if the view indicates 'yes'\par
        that the FRA was shown in court."""}\par
        {\cf4 if} current_text == {\cf6 "}{\cf6 Yes}{\cf6 "}:\par
            {\cf3 self}.case_information.fra_in_court = {\cf3 True}\par
        {\cf4 elif} current_text == {\cf6 "}{\cf6 No}{\cf6 "}:\par
            {\cf3 self}.case_information.fra_in_court = {\cf3 False}\par
        {\cf4 else}:\par
            {\cf3 self}.case_information.fra_in_court = {\cf3 None}\par
\par
    {\cf4 def} {\cf10 set_offense_type}({\cf3 self}):\par
        key = {\cf3 self}.statute_choice_box.currentText()\par
        {\cf4 if} {\cf3 self}.freeform_entry_checkBox.isChecked():\par
            {\cf4 return} {\cf3 None}\par
        query = QSqlQuery(database_statutes)\par
        query.prepare({\cf6 "}{\cf6 SELECT * FROM charges WHERE }{\cf6 "} {\cf6 "}{\cf6 statute LIKE }{\cf6 '}{\cf6 %}{\cf6 '}{\cf6  || :key || }{\cf6 '}{\cf6 %}{\cf6 '}{\cf6 "})\par
        query.bindValue({\cf6 "}{\cf6 :key}{\cf6 "}, key)\par
        query.{\cf4 exec}()\par
        {\cf4 while} query.next():\par
            statute = query.value({\cf5 2})\par
            offense_type = query.value({\cf5 4})\par
            {\cf4 if} statute == key:\par
                {\cf4 return} offense_type\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 set_statute}({\cf3 self}, key):\par
        {\cf6 """This method queries based on the offense and then sets the statute\par
        and degree based on the offense in the database.\par
\par
        :key: is the string that is passed by the function each time the field\par
        is changed on the view. This is the offense."""}\par
        {\cf4 if} {\cf3 self}.freeform_entry_checkBox.isChecked():\par
            {\cf4 return} {\cf3 None}\par
        query = QSqlQuery(database_offenses)\par
        query.prepare({\cf6 "}{\cf6 SELECT * FROM charges WHERE }{\cf6 "} {\cf6 "}{\cf6 offense LIKE }{\cf6 '}{\cf6 %}{\cf6 '}{\cf6  || :key || }{\cf6 '}{\cf6 %}{\cf6 '}{\cf6 "})\par
        query.bindValue({\cf6 "}{\cf6 :key}{\cf6 "}, key)\par
        query.{\cf4 exec}()\par
        {\cf4 while} query.next():\par
            offense = query.value({\cf5 1})\par
            statute = query.value({\cf5 2})\par
            degree = query.value({\cf5 3})\par
            {\cf4 if} offense == key:\par
                {\cf3 self}.statute_choice_box.setCurrentText(statute)\par
                {\cf3 self}.degree_choice_box.setCurrentText(degree)\par
                {\cf4 break}\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 set_offense}({\cf3 self}, key):\par
        {\cf6 """This method queries based on the statute and then sets the offense\par
        and degree based on the statute in the database.\par
\par
        :key: is the string that is passed by the function each time the field\par
        is changed on the view. This is the statute."""}\par
        {\cf4 if} {\cf3 self}.freeform_entry_checkBox.isChecked():\par
            {\cf4 return} {\cf3 None}\par
        query = QSqlQuery(database_statutes)\par
        query.prepare({\cf6 "}{\cf6 SELECT * FROM charges WHERE }{\cf6 "} {\cf6 "}{\cf6 statute LIKE }{\cf6 '}{\cf6 %}{\cf6 '}{\cf6  || :key || }{\cf6 '}{\cf6 %}{\cf6 '}{\cf6 "})\par
        query.bindValue({\cf6 "}{\cf6 :key}{\cf6 "}, key)\par
        query.{\cf4 exec}()\par
        {\cf4 while} query.next():\par
            offense = query.value({\cf5 1})\par
            statute = query.value({\cf5 2})\par
            degree = query.value({\cf5 3})\par
            {\cf4 if} statute == key:\par
                {\cf3 self}.offense_choice_box.setCurrentText(offense)\par
                {\cf3 self}.degree_choice_box.setCurrentText(degree)\par
                {\cf4 break}\par
\par
    {\cf1 @logger.catch}\par
    {\cf4 def} {\cf10 set_pay_date}({\cf3 self}, time_to_pay_text):\par
        {\cf6 """Sets the balance of fines and costs to a future date (or today)\par
        depending on the selection of ability_to_pay_box. The inner function\par
        will move the actual date to the next tuesday per court procedure for\par
        show cause hearings being on Tuesday. Would need to be modified if the\par
        policy changed."""}\par
        days_to_add = {\cf3 self}.pay_date_dict[time_to_pay_text]\par
        future_date = date.today() + timedelta(days_to_add)\par
        today = date.today()\par
\par
        {\cf4 def} {\cf10 next_tuesday}(future_date, weekday={\cf5 1}):\par
            {\cf6 """This function returns the number of days to add to today to set\par
            the payment due date out to the Tuesday after the number of days\par
            set in the set_pay_date function. The default of 1 for weekday is\par
            what sets it to a Tuesday. If it is 0 it would be Monday, 3 would\par
            be Wednesday, etc."""}\par
            days_ahead = weekday - future_date.weekday()\par
            {\cf4 if} days_ahead <= {\cf5 0}:  {\cf9\i # Target day already happened this week}\par
                days_ahead += {\cf5 7}\par
            {\cf4 return} future_date + timedelta(days_ahead)\par
\par
        future_date = next_tuesday(future_date, {\cf5 1})\par
        total_days_to_add = (future_date - today).days\par
        {\cf3 self}.balance_due_date.setDate(QDate.currentDate().addDays(total_days_to_add))\par
\par
\par
{\cf4 if} {\cf2 __name__} == {\cf6 "}{\cf6 __main__}{\cf6 "}:\par
    {\cf4 print}({\cf6 "}{\cf6 MMD ran directly}{\cf6 "})\par
{\cf4 else}:\par
    {\cf4 print}({\cf6 "}{\cf6 MMD ran when imported}{\cf6 "})\par
    database_offenses, database_statutes = create_database_connections()\par
}