{\rtf1\ansi\uc0\deff0{\fonttbl{\f0\fmodern\fprq1\fcharset0;}}{\colortbl;\red170\green85\blue0;\red0\green153\blue153;\red255\green0\blue0;\red255\green170\blue170;\red170\green170\blue170;\red128\green0\blue128;\red136\green136\blue136;\red0\green170\blue0;\red170\green0\blue0;\red0\green170\blue170;\red0\green0\blue170;\red136\green0\blue0;\red30\green144\blue255;\red0\green0\blue128;\red85\green85\blue85;\red76\green131\blue23;\red187\green187\blue187;}\f0 {\cf1 """The module that contains all controller classes that are commmon to criminal\par
cases (criminal includes traffic). """}\par
{\cf11 import} {\cf10\ul os}\par
{\cf11 import} {\cf10\ul pathlib}\par
{\cf11 from} {\cf10\ul docxtpl} {\cf11 import} DocxTemplate\par
{\cf11 from} {\cf10\ul loguru} {\cf11 import} logger\par
\par
{\cf11 from} {\cf10\ul PyQt5.QtWidgets} {\cf11 import} QDialog\par
{\cf11 from} {\cf10\ul PyQt5} {\cf11 import} QtCore\par
{\cf11 from} {\cf10\ul PyQt5.QtCore} {\cf11 import} QDate\par
{\cf11 from} {\cf10\ul PyQt5.QtWidgets} {\cf11 import} QLabel, QPushButton, QMessageBox, QComboBox, QLineEdit\par
{\cf11 from} {\cf10\ul PyQt5.QtSql} {\cf11 import} QSqlDatabase, QSqlQuery\par
\par
{\cf11 from} {\cf10\ul models.case_information} {\cf11 import} (\par
    CaseInformation,\par
    CriminalCharge,\par
    AmendOffenseDetails,\par
    LicenseSuspensionTerms,\par
    CommunityControlTerms,\par
    CommunityServiceTerms,\par
    OtherConditionsTerms,\par
)\par
{\cf11 from} {\cf10\ul views.add_conditions_dialog_ui} {\cf11 import} Ui_AddConditionsDialog\par
{\cf11 from} {\cf10\ul views.amend_offense_dialog_ui} {\cf11 import} Ui_AmendOffenseDialog\par
{\cf11 from} {\cf10\ul resources.db.DatabaseCreation} {\cf11 import} create_offense_list, create_statute_list\par
\par
\par
PATH = {\cf10 str}(pathlib.Path().absolute())\par
TEMPLATE_PATH = PATH + {\cf1 "}{\cf1 \\\\}{\cf1 resources}{\cf1 \\\\}{\cf1 Templates}{\cf1 \\\\}{\cf1 "}\par
SAVE_PATH = PATH + {\cf1 "}{\cf1 \\\\}{\cf1 resources}{\cf1 \\\\}{\cf1 Saved}{\cf1 \\\\}{\cf1 "}\par
DB_PATH = PATH + {\cf1 "}{\cf1 \\\\}{\cf1 resources}{\cf1 \\\\}{\cf1 db}{\cf1 \\\\}{\cf1 "}\par
CHARGES_DATABASE = DB_PATH + {\cf1 "}{\cf1 \\\\}{\cf1 charges.sqlite}{\cf1 "}\par
\par
\par
{\cf11 class} {\cf8\ul BaseCriminalDialog}(QDialog):\par
    {\cf1 """This class is a base class to provide methods that are used by some or\par
    all class controllers that are used in the application. This class is never\par
    instantiated as its own dialog, but the init contains the setup for all\par
    inherited class controllers."""}\par
\par
    {\cf11 def} {\cf8 __init__}({\cf10 self}, parent={\cf10 None}):\par
        {\cf10 super}().{\cf8 __init__}(parent)\par
        {\cf10 self}.setupUi({\cf10 self})\par
        {\cf10 self}.doc = {\cf10 None}\par
        {\cf10 self}.docname = {\cf10 None}\par
        {\cf10 self}.pay_date_dict = \{\par
            {\cf1 "}{\cf1 forthwith}{\cf1 "}: {\cf2 0},\par
            {\cf1 "}{\cf1 within 30 days}{\cf1 "}: {\cf2 30},\par
            {\cf1 "}{\cf1 within 60 days}{\cf1 "}: {\cf2 60},\par
            {\cf1 "}{\cf1 within 90 days}{\cf1 "}: {\cf2 90},\par
        \}\par
\par
    {\cf11 def} {\cf8 close_window}({\cf10 self}):\par
        {\cf1 """Function connected to a button to close the window. Can be connected\par
        to any button press/click/release to close a window."""}\par
        {\cf10 self}.close()\par
\par
    {\cf7 @logger.catch}\par
    {\cf11 def} {\cf8 add_charge_process}({\cf10 self}, {\cf10 bool}):\par
        {\cf1 """The order of functions that are called when the add_charge_Button is\par
        clicked(). The order is important to make sure the informaiton is\par
        updated before the charge is added and the data cleared from the fields.\par
\par
        The bool is passed as an argument through clicked() but not used."""}\par
        {\cf10 self}.criminal_charge = CriminalCharge()\par
        {\cf10 self}.add_charge()\par
        {\cf10 self}.clear_charge_fields()\par
\par
    {\cf7 @logger.catch}\par
    {\cf11 def} {\cf8 create_entry_process}({\cf10 self}):\par
        {\cf1 """The order of functions that are called when the create_entry_Button is pressed()\par
        on the MinorMisdemeanorDialog. The order is important to make sure the information is\par
        updated before the entry is created."""}\par
        {\cf10 self}.update_case_information()\par
        {\cf10 self}.create_entry()\par
        {\cf10 self}.close_event()\par
\par
    {\cf7 @logger.catch}\par
    {\cf11 def} {\cf8 create_entry}({\cf10 self}):\par
        {\cf1 """The standard function used to create an entry when a create entry\par
        button is press/click/released."""}\par
        {\cf10 self}.doc = DocxTemplate({\cf10 self}.template.template_path)\par
        {\cf10 self}.doc.render({\cf10 self}.case_information.get_case_information())\par
        {\cf10 self}.set_document_name()\par
        {\cf10 self}.doc.save(SAVE_PATH + {\cf10 self}.docname)\par
        os.startfile(SAVE_PATH + {\cf10 self}.docname)\par
\par
    {\cf11 def} {\cf8 set_document_name}({\cf10 self}):\par
        {\cf1 """Sets document name based on the case number and name of the template\par
        must include '.docx' to make it a Word document."""}\par
        {\cf10 self}.docname = (\par
            {\cf10 self}.case_information.case_number + {\cf1 "}{\cf1 _}{\cf1 "} + {\cf10 self}.template.template_name + {\cf1 "}{\cf1 .docx}{\cf1 "}\par
        )\par
\par
    {\cf11 def} {\cf8 set_case_information_banner}({\cf10 self}):\par
        {\cf1 """Sets the banner on a view of the interface. It modifies label\par
        widgets on the view to text that was entered."""}\par
        {\cf10 self}.defendant_name_label.setText(\par
            {\cf1 "}{\cf1 State of Ohio v. \{defendant_first_name\} \{defendant_last_name\}}{\cf1 "}.format(\par
                defendant_first_name = {\cf10 self}.case_information.defendant.first_name,\par
                defendant_last_name = {\cf10 self}.case_information.defendant.last_name\par
                )\par
            )\par
        {\cf10 self}.case_number_label.setText({\cf10 self}.case_information.case_number)\par
        {\cf11 if} {\cf10 self}.case_information.defendant_attorney_name {\cf11 is} {\cf11 not} {\cf10 None}:\par
            {\cf10 self}.defendant_attorney_name_label.setText(\par
                {\cf1 "}{\cf1 Attorney: }{\cf1 "} + {\cf10 self}.case_information.defendant_attorney_name\par
            )\par
        {\cf11 else}:\par
            {\cf10 self}.defendant_attorney_name_label.setText({\cf1 "}{\cf1 Attorney: None}{\cf1 "})\par
\par
    {\cf11 def} {\cf8 update_case_information}({\cf10 self}):\par
        {\cf1 """Placeholder for future use to refactor out of other dialogs and reduce\par
        code reuse."""}\par
        {\cf11 pass}\par
\par
\par
{\cf11 class} {\cf8\ul AddConditionsDialog}(BaseCriminalDialog, Ui_AddConditionsDialog):\par
    {\cf1 """The AddConditionsDialog is created when the addConditionsButton is clicked on\par
    the MinorMisdemeanorDialog. The conditions that are available to enter information\par
    for are based on the checkboxes that are checked on the MMD screen."""}\par
\par
    {\cf7 @logger.catch}\par
    {\cf11 def} {\cf8 __init__}({\cf10 self}, minor_misdemeanor_dialog, parent={\cf10 None}):\par
        {\cf10 super}().{\cf8 __init__}(parent)\par
        {\cf10 self}.case_information = minor_misdemeanor_dialog.case_information\par
        {\cf10 self}.modify_view()\par
        {\cf10 self}.community_service = (\par
            minor_misdemeanor_dialog.community_service_checkBox.isChecked()\par
        )\par
        {\cf10 self}.license_suspension = (\par
            minor_misdemeanor_dialog.license_suspension_checkBox.isChecked()\par
        )\par
        {\cf10 self}.community_control = (\par
            minor_misdemeanor_dialog.community_control_checkBox.isChecked()\par
        )\par
        {\cf10 self}.other_conditions = (\par
            minor_misdemeanor_dialog.other_conditions_checkBox.isChecked()\par
        )\par
        {\cf10 self}.other_conditions = (\par
            minor_misdemeanor_dialog.other_conditions_checkBox.isChecked()\par
        )\par
        {\cf10 self}.enable_condition_frames()\par
\par
    {\cf7 @logger.catch}\par
    {\cf11 def} {\cf8 modify_view}({\cf10 self}):\par
        {\cf1 """Modifies the view of AddConditionsDialog that is created by the UI\par
        file.\par
        Gets the total number of charges from the charges in charges_list then\par
        loops through the charges_list and adds parts of each charge to the\par
        view. CLEAN UP?"""}\par
        index_of_charge_to_add = {\cf2 0}\par
        column = {\cf10 self}.charges_gridLayout.columnCount() + {\cf2 1}\par
        total_charges_to_add = {\cf10 len}({\cf10 self}.case_information.charges_list)\par
        {\cf11 while} index_of_charge_to_add < total_charges_to_add:\par
            charge = {\cf10 vars}({\cf10 self}.case_information.charges_list[index_of_charge_to_add])\par
            {\cf11 if} charge {\cf11 is} {\cf11 not} {\cf10 None}:\par
                {\cf10 self}.charges_gridLayout.addWidget(\par
                    QLabel(charge.get({\cf1 "}{\cf1 offense}{\cf1 "})), {\cf2 0}, column\par
                )\par
                {\cf10 self}.charges_gridLayout.addWidget(\par
                    QLabel(charge.get({\cf1 "}{\cf1 statute}{\cf1 "})), {\cf2 1}, column\par
                )\par
                {\cf10 self}.charges_gridLayout.addWidget(\par
                    QLabel(charge.get({\cf1 "}{\cf1 finding}{\cf1 "})), {\cf2 2}, column\par
                )\par
                column += {\cf2 1}\par
                index_of_charge_to_add += {\cf2 1}\par
\par
    {\cf7 @logger.catch}\par
    {\cf11 def} {\cf8 enable_condition_frames}({\cf10 self}):\par
        {\cf1 """Enables the frames on the AddConditionsDialog dialog if the condition is checked\par
        on the MinorMisdemeanorDialog screen. Also creates an instance of the object for\par
        each condition."""}\par
        {\cf11 if} {\cf10 self}.other_conditions {\cf11 is} {\cf10 True}:\par
            {\cf10 self}.other_conditions_frame.setEnabled({\cf10 True})\par
            {\cf10 self}.other_conditions_details = OtherConditionsTerms()\par
        {\cf11 if} {\cf10 self}.license_suspension {\cf11 is} {\cf10 True}:\par
            {\cf10 self}.license_suspension_frame.setEnabled({\cf10 True})\par
            {\cf10 self}.license_suspension_details = LicenseSuspensionTerms()\par
            {\cf10 self}.license_suspension_date_box.setDate(QtCore.QDate.currentDate())\par
        {\cf11 if} {\cf10 self}.community_service {\cf11 is} {\cf10 True}:\par
            {\cf10 self}.community_service_frame.setEnabled({\cf10 True})\par
            {\cf10 self}.community_service_terms = CommunityServiceTerms()\par
            {\cf10 self}.community_service_date_to_complete_box.setDate(\par
                QtCore.QDate.currentDate()\par
            )\par
        {\cf11 if} {\cf10 self}.community_control {\cf11 is} {\cf10 True}:\par
            {\cf10 self}.community_control_frame.setEnabled({\cf10 True})\par
            {\cf10 self}.community_control_terms = CommunityControlTerms()\par
\par
    {\cf7 @logger.catch}\par
    {\cf11 def} {\cf8 add_conditions}({\cf10 self}):\par
        {\cf1 """The method is connected to the pressed() signal of continue_Button on the\par
        Add Conditions screen."""}\par
        {\cf11 if} {\cf10 self}.community_service {\cf11 is} {\cf10 True}:\par
            {\cf10 self}.add_community_service_terms()\par
        {\cf11 if} {\cf10 self}.community_control {\cf11 is} {\cf10 True}:\par
            {\cf10 self}.add_community_control_terms()\par
        {\cf11 if} {\cf10 self}.license_suspension {\cf11 is} {\cf10 True}:\par
            {\cf10 self}.add_license_suspension_details()\par
        {\cf11 if} {\cf10 self}.other_conditions {\cf11 is} {\cf10 True}:\par
            {\cf10 self}.add_other_condition_details()\par
\par
    {\cf7 @logger.catch}\par
    {\cf11 def} {\cf8 add_community_control_terms}({\cf10 self}):\par
        {\cf1 """The method adds the data entered to the CommunityControlTerms object\par
        that is created when the dialog is initialized. Then the data is transferred\par
        to case_information."""}\par
        {\cf10 self}.community_control_terms.type_of_community_control = (\par
            {\cf10 self}.type_of_community_control_box.currentText()\par
        )\par
        {\cf10 self}.community_control_terms.term_of_community_control = (\par
            {\cf10 self}.term_of_community_control_box.currentText()\par
        )\par
        {\cf10 self}.case_information.community_control_terms = {\cf10 self}.community_control_terms\par
\par
    {\cf7 @logger.catch}\par
    {\cf11 def} {\cf8 add_community_service_terms}({\cf10 self}):\par
        {\cf1 """The method adds the data entered to the CommunityServiceTerms object\par
        that is created when the dialog is initialized. Then the data is transferred\par
        to case_information."""}\par
        {\cf10 self}.community_service_terms.hours_of_service = (\par
            {\cf10 self}.community_service_hours_ordered_box.value()\par
        )\par
        {\cf10 self}.community_service_terms.days_to_complete_service = (\par
            {\cf10 self}.community_service_days_to_complete_box.currentText()\par
        )\par
        {\cf10 self}.community_service_terms.due_date_for_service = (\par
            {\cf10 self}.community_service_date_to_complete_box.date().toString({\cf1 "}{\cf1 MMMM dd, yyyy}{\cf1 "})\par
        )\par
        {\cf10 self}.case_information.community_service_terms = {\cf10 self}.community_service_terms\par
\par
    {\cf7 @logger.catch}\par
    {\cf11 def} {\cf8 add_license_suspension_details}({\cf10 self}):\par
        {\cf1 """The method adds the data entered to the LicenseSuspensionTerms object\par
        that is created when the dialog is initialized. Then the data is transferred\par
        to case_information."""}\par
        {\cf10 self}.license_suspension_details.license_type = (\par
            {\cf10 self}.license_type_box.currentText()\par
        )\par
        {\cf10 self}.license_suspension_details.license_suspended_date = (\par
            {\cf10 self}.license_suspension_date_box.date().toString({\cf1 "}{\cf1 MMMM dd, yyyy}{\cf1 "})\par
        )\par
        {\cf10 self}.license_suspension_details.license_suspension_term = (\par
            {\cf10 self}.term_of_suspension_box.currentText()\par
        )\par
        {\cf11 if} {\cf10 self}.remedial_driving_class_checkBox.isChecked():\par
            {\cf10 self}.license_suspension_details.remedial_driving_class_required = {\cf10 True}\par
        {\cf11 else}:\par
            {\cf10 self}.license_suspension_details.remedial_driving_class_required = {\cf10 False}\par
        {\cf10 self}.case_information.license_suspension_details = (\par
            {\cf10 self}.license_suspension_details\par
        )\par
\par
    {\cf7 @logger.catch}\par
    {\cf11 def} {\cf8 add_other_condition_details}({\cf10 self}):\par
        {\cf1 """The method allows for adding other conditions based on free form text\par
        entry."""}\par
        {\cf10 self}.other_conditions_details.other_conditions_terms = (\par
            {\cf10 self}.other_conditions_plainTextEdit.toPlainText()\par
        )\par
        {\cf10 self}.case_information.other_conditions_details = (\par
            {\cf10 self}.other_conditions_details\par
        )\par
\par
\par
    {\cf7 @logger.catch}\par
    {\cf11 def} {\cf8 set_service_date}({\cf10 self}, days_to_complete):\par
        {\cf1 """Sets the community_service_date_to_complete_box based on the number\par
        of days chosen in the community_service_date_to_complete_box."""}\par
        days_to_complete = {\cf10 int}(\par
            {\cf10 self}.community_service_days_to_complete_box.currentText()\par
        )\par
        {\cf10 self}.community_service_date_to_complete_box.setDate(\par
            QDate.currentDate().addDays(days_to_complete)\par
        )\par
\par
\par
{\cf11 class} {\cf8\ul AmendOffenseDialog}(BaseCriminalDialog, Ui_AmendOffenseDialog):\par
    {\cf1 """The AddOffenseDialog is created when the amendOffenseButton is clicked on\par
    the MinorMisdemeanorDialog screen. The case information is passed in\par
    order to populate the case information banner.\par
\par
    The set_case_information_banner is an inherited method from BaseCriminalDialog."""}\par
    {\cf7 @logger.catch}\par
    {\cf11 def} {\cf8 __init__}({\cf10 self}, case_information, parent={\cf10 None}):\par
        {\cf10 super}().{\cf8 __init__}(parent)\par
        {\cf10 self}.case_information = case_information\par
        {\cf10 self}.amend_offense_details = AmendOffenseDetails()\par
        {\cf10 self}.set_case_information_banner()\par
        {\cf10 self}.modify_view()\par
\par
    {\cf7 @logger.catch}\par
    {\cf11 def} {\cf8 modify_view}({\cf10 self}):\par
        {\cf1 """The modify view method updates the view that is created on init.\par
        Place items in this method that can't be added directly in QtDesigner\par
        so that they don't need to be changed in the view file each time pyuic5\par
        is run."""}\par
        offense_list = create_offense_list()\par
        {\cf10 self}.original_charge_box.addItems(offense_list)\par
        {\cf10 self}.amended_charge_box.addItems(offense_list)\par
\par
    {\cf7 @logger.catch}\par
    {\cf11 def} {\cf8 amend_offense}({\cf10 self}):\par
        {\cf1 """Adds the data entered for the amended offense to the AmendOffenseDetails\par
        object then points the case_information object to the AmendOffenseDetails\par
        object."""}\par
        {\cf10 self}.amend_offense_details.original_charge = (\par
            {\cf10 self}.original_charge_box.currentText()\par
        )\par
        {\cf10 self}.amend_offense_details.amended_charge = (\par
            {\cf10 self}.amended_charge_box.currentText()\par
        )\par
        {\cf10 self}.amend_offense_details.motion_disposition = (\par
            {\cf10 self}.motion_decision_box.currentText()\par
        )\par
        {\cf10 self}.case_information.amend_offense_details = {\cf10 self}.amend_offense_details\par
}